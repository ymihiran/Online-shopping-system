{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass App {\n  /**\n   * Provides access to the `applications` version 2 endpoint.\n   */\n  static get PATH() {\n    return \"/v2/applications\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition App options.\n   */\n\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  _convertMethodSignature(name, type, answerUrl, eventUrl, options) {\n    var capability = {};\n\n    switch (type) {\n      case \"voice\":\n        capability = {\n          voice: {\n            webhooks: {\n              answer_url: {\n                address: answerUrl,\n                http_method: \"GET\"\n              },\n              event_url: {\n                address: eventUrl,\n                http_method: \"POST\"\n              }\n            }\n          }\n        };\n        break;\n\n      case \"messages\":\n        capability = {\n          messages: {\n            webhooks: {\n              inbound_url: {\n                address: options.inbound_url,\n                http_method: \"POST\"\n              },\n              status_url: {\n                address: options.status_url,\n                http_method: \"POST\"\n              }\n            }\n          }\n        };\n        break;\n\n      case \"rtc\":\n        capability = {\n          rtc: {\n            webhooks: {\n              event_url: {\n                address: eventUrl,\n                http_method: \"POST\"\n              }\n            }\n          }\n        };\n        break;\n    }\n\n    return {\n      name: name,\n      capabilities: capability\n    };\n  }\n\n  _convertApplicationResponse(application) {\n    for (var capability in application.capabilities) {\n      application[capability] = {\n        webhooks: []\n      };\n\n      for (var webhook in application.capabilities[capability].webhooks) {\n        application[capability].webhooks.push({\n          endpoint_type: webhook,\n          endpoint: application.capabilities[capability].webhooks[webhook].address,\n          http_method: application.capabilities[capability].webhooks[webhook].http_method\n        });\n      }\n    }\n\n    delete application.capabilities;\n    return application;\n  }\n\n  _convertApplicationListResponse(applicationResponseHandler) {\n    return response => {\n      response.count = response.total_items;\n      response.page_index = response.page;\n\n      for (var i in response._embedded.applications) {\n        response._embedded.applications[i] = applicationResponseHandler(response._embedded.applications[i]);\n      }\n\n      return response;\n    };\n  }\n  /**\n   * TODO: document\n   */\n\n\n  create(name, type, answerUrl, eventUrl, options, callback) {\n    var params = {};\n    var responseParser = null;\n\n    if (arguments.length > 2) {\n      params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));\n      responseParser = this._convertApplicationResponse;\n    } else {\n      params = JSON.stringify(name);\n      callback = type;\n    }\n\n    var authorization = \"\".concat(this.creds.apiKey, \":\").concat(this.creds.apiSecret);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: App.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Basic \".concat(Buffer.from(authorization).toString(\"base64\"))\n      }\n    };\n    this.options.httpClient.request(config, callback, callback, false, responseParser);\n  }\n  /**\n   * TODO: document\n   */\n\n\n  get(params, callback) {\n    var v2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var authorization = \"\".concat(this.creds.apiKey, \":\").concat(this.creds.apiSecret);\n    var responseParser = null;\n\n    if (typeof params !== \"object\") {\n      responseParser = this._convertApplicationResponse;\n    } else {\n      responseParser = this._convertApplicationListResponse(this._convertApplicationResponse);\n    }\n\n    if (v2) {\n      responseParser = null;\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: _Utils.default.createPathWithQuery(App.PATH, params),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Basic \".concat(Buffer.from(authorization).toString(\"base64\"))\n      }\n    };\n    this.options.httpClient.request(config, callback, callback, false, responseParser);\n  }\n  /**\n   * TODO: document\n   */\n\n\n  update(appId, name, type, answerUrl, eventUrl, options, callback) {\n    var params = {};\n    var responseParser = null;\n\n    if (arguments.length > 3) {\n      params = JSON.stringify(this._convertMethodSignature(name, type, answerUrl, eventUrl, options));\n      responseParser = this._convertApplicationResponse;\n    } else {\n      params = JSON.stringify(name);\n      callback = type;\n    }\n\n    var authorization = \"\".concat(this.creds.apiKey, \":\").concat(this.creds.apiSecret);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(App.PATH, \"/\").concat(appId),\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Basic \".concat(Buffer.from(authorization).toString(\"base64\"))\n      }\n    };\n    this.options.httpClient.request(config, callback, callback, false, responseParser);\n  }\n  /**\n   * TODO: document\n   */\n\n\n  delete(appId, callback) {\n    var authorization = \"\".concat(this.creds.apiKey, \":\").concat(this.creds.apiSecret);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(App.PATH, \"/\").concat(appId),\n      method: \"DELETE\",\n      body: \"{}\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Basic \".concat(Buffer.from(authorization).toString(\"base64\"))\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n}\n\nvar _default = App;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/App.js"],"names":["PATH","constructor","options","_convertMethodSignature","capability","voice","webhooks","answer_url","address","http_method","event_url","messages","inbound_url","status_url","rtc","name","capabilities","_convertApplicationResponse","application","endpoint_type","endpoint","_convertApplicationListResponse","response","applicationResponseHandler","create","params","responseParser","arguments","JSON","callback","authorization","config","host","path","App","method","body","headers","Authorization","Buffer","get","v2","Utils","update","delete"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nclass App {\n  /**\n   * Provides access to the `applications` version 2 endpoint.\n   */\n  static get PATH() {\n    return \"/v2/applications\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition App options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  _convertMethodSignature(name, type, answerUrl, eventUrl, options) {\n    let capability = {};\n    switch (type) {\n      case \"voice\":\n        capability = {\n          voice: {\n            webhooks: {\n              answer_url: {\n                address: answerUrl,\n                http_method: \"GET\",\n              },\n              event_url: {\n                address: eventUrl,\n                http_method: \"POST\",\n              },\n            },\n          },\n        };\n        break;\n      case \"messages\":\n        capability = {\n          messages: {\n            webhooks: {\n              inbound_url: {\n                address: options.inbound_url,\n                http_method: \"POST\",\n              },\n              status_url: {\n                address: options.status_url,\n                http_method: \"POST\",\n              },\n            },\n          },\n        };\n        break;\n      case \"rtc\":\n        capability = {\n          rtc: {\n            webhooks: {\n              event_url: {\n                address: eventUrl,\n                http_method: \"POST\",\n              },\n            },\n          },\n        };\n        break;\n    }\n\n    return {\n      name: name,\n      capabilities: capability,\n    };\n  }\n\n  _convertApplicationResponse(application) {\n    for (let capability in application.capabilities) {\n      application[capability] = {\n        webhooks: [],\n      };\n      for (let webhook in application.capabilities[capability].webhooks) {\n        application[capability].webhooks.push({\n          endpoint_type: webhook,\n          endpoint:\n            application.capabilities[capability].webhooks[webhook].address,\n          http_method:\n            application.capabilities[capability].webhooks[webhook].http_method,\n        });\n      }\n    }\n\n    delete application.capabilities;\n    return application;\n  }\n\n  _convertApplicationListResponse(applicationResponseHandler) {\n    return (response) => {\n      response.count = response.total_items;\n      response.page_index = response.page;\n      for (let i in response._embedded.applications) {\n        response._embedded.applications[i] = applicationResponseHandler(\n          response._embedded.applications[i]\n        );\n      }\n\n      return response;\n    };\n  }\n\n  /**\n   * TODO: document\n   */\n  create(name, type, answerUrl, eventUrl, options, callback) {\n    let params = {};\n    let responseParser = null;\n\n    if (arguments.length > 2) {\n      params = JSON.stringify(\n        this._convertMethodSignature(name, type, answerUrl, eventUrl, options)\n      );\n      responseParser = this._convertApplicationResponse;\n    } else {\n      params = JSON.stringify(name);\n      callback = type;\n    }\n\n    const authorization = `${this.creds.apiKey}:${this.creds.apiSecret}`;\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: App.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Basic ${Buffer.from(authorization).toString(\"base64\")}`,\n      },\n    };\n\n    this.options.httpClient.request(\n      config,\n      callback,\n      callback,\n      false,\n      responseParser\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  get(params, callback, v2 = false) {\n    const authorization = `${this.creds.apiKey}:${this.creds.apiSecret}`;\n    let responseParser = null;\n\n    if (typeof params !== \"object\") {\n      responseParser = this._convertApplicationResponse;\n    } else {\n      responseParser = this._convertApplicationListResponse(\n        this._convertApplicationResponse\n      );\n    }\n\n    if (v2) {\n      responseParser = null;\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: Utils.createPathWithQuery(App.PATH, params),\n      method: \"GET\",\n      body: undefined,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Basic ${Buffer.from(authorization).toString(\"base64\")}`,\n      },\n    };\n\n    this.options.httpClient.request(\n      config,\n      callback,\n      callback,\n      false,\n      responseParser\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  update(appId, name, type, answerUrl, eventUrl, options, callback) {\n    let params = {};\n    let responseParser = null;\n    if (arguments.length > 3) {\n      params = JSON.stringify(\n        this._convertMethodSignature(name, type, answerUrl, eventUrl, options)\n      );\n      responseParser = this._convertApplicationResponse;\n    } else {\n      params = JSON.stringify(name);\n      callback = type;\n    }\n\n    const authorization = `${this.creds.apiKey}:${this.creds.apiSecret}`;\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${App.PATH}/${appId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Basic ${Buffer.from(authorization).toString(\"base64\")}`,\n      },\n    };\n\n    this.options.httpClient.request(\n      config,\n      callback,\n      callback,\n      false,\n      responseParser\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  delete(appId, callback) {\n    const authorization = `${this.creds.apiKey}:${this.creds.apiSecret}`;\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${App.PATH}/${appId}`,\n      method: \"DELETE\",\n      body: \"{}\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Basic ${Buffer.from(authorization).toString(\"base64\")}`,\n      },\n    };\n\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"script"}