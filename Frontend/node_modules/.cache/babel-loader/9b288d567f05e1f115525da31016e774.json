{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass NumberInsight {\n  static get PATH() {\n    return \"/ni/{type}/json\";\n  }\n\n  static get ERROR_MESSAGES() {\n    return {\n      numberInsightAdvancedValidation: \"Missing Mandatory fields (number and/or callback url)\",\n      numberInsightValidation: \"Missing Mandatory field - number\",\n      numberInsightPatternFailure: \"Number can contain digits and may include any or all of the following: white space, -,+, (, ).\"\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Vonage platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n\n\n  get(options, callback) {\n    var level = options.level; // remove 'level' as it's a library-only parameter\n\n    delete options.level;\n\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn('DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.');\n      }\n\n      this._numberInsightAsync(options, callback);\n    } else if (level === \"advancedSync\") {\n      this._numberInsightCommon(\"advanced\", options, callback);\n    } else if (level === \"standard\") {\n      this._numberInsightCommon(\"standard\", options, callback);\n    } else {\n      this._numberInsightCommon(\"basic\", options, callback);\n    }\n  }\n\n  _numberInsightAsync(inputParams, callback) {\n    if (!inputParams.number || !inputParams.callback) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightAdvancedValidation));\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(NumberInsight.PATH.replace(\"{type}\", \"advanced/async\")), inputParams)\n      }, callback);\n    }\n  }\n\n  _numberInsightCommon(type, inputParams, callback) {\n    if (this._validateNumber(inputParams, callback)) {\n      var inputObj;\n\n      if (typeof inputParams !== \"object\") {\n        inputObj = {\n          number: inputParams\n        };\n      } else {\n        inputObj = inputParams;\n      }\n\n      inputObj[\"api_key\"] = this.creds.apiKey;\n      inputObj[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(NumberInsight.PATH.replace(\"{type}\", type)), inputObj)\n      }, callback);\n    }\n  }\n\n  _validateNumber(inputParams, callback) {\n    var numberPattern = new RegExp(\"^[0-9 +()-]*$\");\n\n    if (typeof inputParams === \"object\" && !inputParams.number) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightValidation));\n    } else if (typeof inputParams === \"object\" && !numberPattern.test(inputParams.number)) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure));\n    } else if (typeof inputParams !== \"object\" && (!inputParams || !numberPattern.test(inputParams))) {\n      _Utils.default.sendError(callback, new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure));\n    }\n\n    return true;\n  }\n\n}\n\nvar _default = NumberInsight;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/NumberInsight.js"],"names":["PATH","ERROR_MESSAGES","numberInsightAdvancedValidation","numberInsightValidation","numberInsightPatternFailure","constructor","options","get","level","console","_numberInsightAsync","inputParams","Utils","NumberInsight","host","path","_numberInsightCommon","inputObj","number","_validateNumber","numberPattern"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nclass NumberInsight {\n  static get PATH() {\n    return \"/ni/{type}/json\";\n  }\n\n  static get ERROR_MESSAGES() {\n    return {\n      numberInsightAdvancedValidation:\n        \"Missing Mandatory fields (number and/or callback url)\",\n      numberInsightValidation: \"Missing Mandatory field - number\",\n      numberInsightPatternFailure:\n        \"Number can contain digits and may include any or all of the following: white space, -,+, (, ).\",\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition NumberInsight options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * Get insight on the provided number.\n   *\n   * @param {Object} options - The options for Number Insight\n   * @param {string} options.level - the level of insight: 'basic', 'standard'\n   *                 or 'advanced'.\n   *                 If no `level` value is provided, or an unrecognised value\n   *                 is used, 'basic' level insight will be used.\n   * @param {string} options.number - the phone number to retrieve insight on\n   * @param {string} options.country - 'basic' and 'standard' only.\n   *                 An ISO 3166 Alpha 2 country code\n   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   * @param {string} options. ip - 'advanced' only.\n   *                 The IP address in IPv4 notation of the endpoint the\n   *                 user connected from.\n   * @param {Array}  options.features - 'advanced' only.\n   *                 An Array detailing the information you want for this phone\n   *                 number. Possible Array elements are:\n   *                 - type: number is one of the following: mobile, landline,\n   *                          landline_premium or unknown phone number.\n   *                 - valid: number exists.\n   *                 - reachable: is number available now.\n   *                 - carrier: the MCCMNC for the carrier number is registered\n   *                             with. This is either: <ISO country code>-FIXED\n   *                             or <ISO country code>-PREMIUM.\n   *                 - ported: if the user has changed carrier for number.\n   *                 - roaming: the subscriber is outside their home network\n   *\n   * @param {string} options.callback - 'advanced' only.\n   *                 The callback to be called when the API call completes.\n   * @param {Number} options.callback_timeout - 'advanced' only.\n   *                 The maximum wait until the Number Insight Return Parameters\n   *                 are sent to callback. This is a value between 1000 - 30000ms\n   *                 inclusive. The default is 30000 ms.\n   * @param {string} options.callback_method - 'advanced' only.\n   *                 The HTTP method used to send the Number Insight Return\n   *                 Parameters to callback. Must be GET or POST. The default\n   *                 value is GET.\n   * @param {string} options.client_ref - 'advanced' only.\n   *                 A 40 character reference string returned in the Number\n   *                 Insight Return Parameters. This may be useful for your\n   *                 internal reports.\n   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.\n   *                 Tells the Vonage platform to make callbacks as soon as an\n   *                 individual piece of information is retrieved.\n   */\n  get(options, callback) {\n    var level = options.level;\n    // remove 'level' as it's a library-only parameter\n    delete options.level;\n\n    if (level === \"advanced\" || level === \"advancedAsync\") {\n      if (level === \"advanced\") {\n        console.warn(\n          'DEPRECATION WARNING: Number Insight Advanced with a level of \"advanced\" will be synchronous in v2.0+. Consider using the level \"advancedAsync\" to keep using the async option.'\n        );\n      }\n      this._numberInsightAsync(options, callback);\n    } else if (level === \"advancedSync\") {\n      this._numberInsightCommon(\"advanced\", options, callback);\n    } else if (level === \"standard\") {\n      this._numberInsightCommon(\"standard\", options, callback);\n    } else {\n      this._numberInsightCommon(\"basic\", options, callback);\n    }\n  }\n\n  _numberInsightAsync(inputParams, callback) {\n    if (!inputParams.number || !inputParams.callback) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightAdvancedValidation)\n      );\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${NumberInsight.PATH.replace(\"{type}\", \"advanced/async\")}`,\n            inputParams\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  _numberInsightCommon(type, inputParams, callback) {\n    if (this._validateNumber(inputParams, callback)) {\n      var inputObj;\n      if (typeof inputParams !== \"object\") {\n        inputObj = {\n          number: inputParams,\n        };\n      } else {\n        inputObj = inputParams;\n      }\n      inputObj[\"api_key\"] = this.creds.apiKey;\n      inputObj[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${NumberInsight.PATH.replace(\"{type}\", type)}`,\n            inputObj\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  _validateNumber(inputParams, callback) {\n    var numberPattern = new RegExp(\"^[0-9 +()-]*$\");\n\n    if (typeof inputParams === \"object\" && !inputParams.number) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightValidation)\n      );\n    } else if (\n      typeof inputParams === \"object\" &&\n      !numberPattern.test(inputParams.number)\n    ) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure)\n      );\n    } else if (\n      typeof inputParams !== \"object\" &&\n      (!inputParams || !numberPattern.test(inputParams))\n    ) {\n      Utils.sendError(\n        callback,\n        new Error(NumberInsight.ERROR_MESSAGES.numberInsightPatternFailure)\n      );\n    }\n    return true;\n  }\n}\n\nexport default NumberInsight;\n"]},"metadata":{},"sourceType":"script"}