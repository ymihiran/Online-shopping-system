{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\n\nvar _ShortCode = _interopRequireDefault(require(\"./ShortCode\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar querystring = require(\"querystring\");\n\nclass Message {\n  static get ERROR_MESSAGES() {\n    return {\n      sender: \"Invalid from address\",\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      body: \"Invalid Body value in Binary Message\",\n      udh: \"Invalid udh value in Binary Message\",\n      title: \"Invalid title in WAP Push message\",\n      url: \"Invalid url in WAP Push message\"\n    };\n  }\n\n  static get PATH() {\n    return \"/sms/json\";\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition SMS options.\n   */\n\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n\n    var _shortcode = new _ShortCode.default(this.creds, this.options);\n\n    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);\n    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);\n    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);\n  }\n\n  _checkToAndFrom(data, callback) {\n    if (!data.from) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));\n    } else if (!data.to) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.to));\n    } else {\n      return;\n    }\n  } // _sendMessageCallback\n\n\n  _sendMessage(data, callback) {\n    this._checkToAndFrom(data, callback);\n\n    this.options.logger.info(\"sending message from \" + data.from + \" to \" + data.to + \" with message \" + data.text);\n    var creds = {\n      api_key: this.creds.apiKey,\n      api_secret: this.creds.apiSecret\n    };\n    var body = Object.assign({}, creds, data);\n    this.options.httpClient.request({\n      host: this.options.restHost || \"rest.nexmo.com\",\n      path: Message.PATH,\n      body: JSON.stringify(body),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }, \"POST\", (err, apiResponse) => {\n      if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {\n        _Utils.default.sendError(callback, new Error(apiResponse.messages[0][\"error-text\"]), apiResponse);\n      } else {\n        if (callback) callback(err, apiResponse);\n      }\n    });\n  }\n  /**\n   * TODO: document\n   */\n\n\n  sendSms(sender, recipient, message, opts, callback) {\n    if (!message) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n\n      this._sendMessage(opts, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  sendBinaryMessage(sender, recipient, body, udh, opts, callback) {\n    if (!body) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.body));\n    } else if (!udh) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"binary\";\n      opts[\"body\"] = body;\n      opts[\"udh\"] = udh;\n\n      this._sendMessage(opts, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {\n    if (!title) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.title));\n    } else if (!url) {\n      _Utils.default.sendError(callback, new Error(Message.ERROR_MESSAGES.url));\n    } else {\n      if (typeof validity === \"function\") {\n        callback = validity;\n        opts = {};\n        validity = 86400000;\n      }\n\n      if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n      }\n\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"wappush\";\n      opts[\"title\"] = title;\n      opts[\"validity\"] = validity;\n      opts[\"url\"] = url;\n\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  search(id, callback) {\n    if (typeof id == \"string\") {\n      return this.options.rest.get(\"/search/message\", {\n        id: id\n      }, callback);\n    } // Otherwise we expect an array\n\n\n    return this.options.rest.get(\"/search/messages\", {\n      ids: id\n    }, callback);\n  }\n\n  searchRejections(to, date, callback) {\n    return this.options.rest.get(\"/search/rejections\", {\n      to,\n      date\n    }, callback);\n  }\n\n}\n\nvar _default = Message;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Message.js"],"names":["querystring","require","ERROR_MESSAGES","sender","to","msg","body","udh","title","url","PATH","constructor","options","_shortcode","ShortCode","_checkToAndFrom","data","Utils","Message","_sendMessage","creds","api_key","api_secret","apiSecret","Object","host","path","JSON","headers","apiResponse","callback","sendSms","opts","sendBinaryMessage","sendWapPushMessage","validity","search","id","ids","searchRejections","date"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nimport ShortCode from \"./ShortCode\";\n\nvar querystring = require(\"querystring\");\n\nclass Message {\n  static get ERROR_MESSAGES() {\n    return {\n      sender: \"Invalid from address\",\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      body: \"Invalid Body value in Binary Message\",\n      udh: \"Invalid udh value in Binary Message\",\n      title: \"Invalid title in WAP Push message\",\n      url: \"Invalid url in WAP Push message\",\n    };\n  }\n\n  static get PATH() {\n    return \"/sms/json\";\n  }\n\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition SMS options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n\n    var _shortcode = new ShortCode(this.creds, this.options);\n\n    this.shortcodeAlert = _shortcode.shortcodeAlert.bind(_shortcode);\n    this.shortcode2FA = _shortcode.shortcode2FA.bind(_shortcode);\n    this.shortcodeMarketing = _shortcode.shortcodeMarketing.bind(_shortcode);\n  }\n\n  _checkToAndFrom(data, callback) {\n    if (!data.from) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.sender));\n    } else if (!data.to) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.to));\n    } else {\n      return;\n    }\n  }\n\n  // _sendMessageCallback\n\n  _sendMessage(data, callback) {\n    this._checkToAndFrom(data, callback);\n\n    this.options.logger.info(\n      \"sending message from \" +\n        data.from +\n        \" to \" +\n        data.to +\n        \" with message \" +\n        data.text\n    );\n\n    let creds = {\n      api_key: this.creds.apiKey,\n      api_secret: this.creds.apiSecret,\n    };\n\n    let body = Object.assign({}, creds, data);\n    this.options.httpClient.request(\n      {\n        host: this.options.restHost || \"rest.nexmo.com\",\n        path: Message.PATH,\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"application/json\" },\n      },\n      \"POST\",\n      (err, apiResponse) => {\n        if (!err && apiResponse.status && apiResponse.messages[0].status > 0) {\n          Utils.sendError(\n            callback,\n            new Error(apiResponse.messages[0][\"error-text\"]),\n            apiResponse\n          );\n        } else {\n          if (callback) callback(err, apiResponse);\n        }\n      }\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  sendSms(sender, recipient, message, opts, callback) {\n    if (!message) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.msg));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  sendBinaryMessage(sender, recipient, body, udh, opts, callback) {\n    if (!body) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.body));\n    } else if (!udh) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.udh));\n    } else {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"binary\";\n      opts[\"body\"] = body;\n      opts[\"udh\"] = udh;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  sendWapPushMessage(sender, recipient, title, url, validity, opts, callback) {\n    if (!title) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.title));\n    } else if (!url) {\n      Utils.sendError(callback, new Error(Message.ERROR_MESSAGES.url));\n    } else {\n      if (typeof validity === \"function\") {\n        callback = validity;\n        opts = {};\n        validity = 86400000;\n      }\n      if (typeof opts === \"function\") {\n        callback = opts;\n        opts = {};\n      }\n      opts[\"from\"] = sender;\n      opts[\"to\"] = recipient;\n      opts[\"type\"] = \"wappush\";\n      opts[\"title\"] = title;\n      opts[\"validity\"] = validity;\n      opts[\"url\"] = url;\n      this._sendMessage(opts, callback);\n    }\n  }\n\n  search(id, callback) {\n    if (typeof id == \"string\") {\n      return this.options.rest.get(\n        \"/search/message\",\n        {\n          id: id,\n        },\n        callback\n      );\n    }\n\n    // Otherwise we expect an array\n    return this.options.rest.get(\n      \"/search/messages\",\n      {\n        ids: id,\n      },\n      callback\n    );\n  }\n\n  searchRejections(to, date, callback) {\n    return this.options.rest.get(\n      \"/search/rejections\",\n      {\n        to,\n        date,\n      },\n      callback\n    );\n  }\n}\n\nexport default Message;\n"]},"metadata":{},"sourceType":"script"}