{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass Voice {\n  static get ERROR_MESSAGES() {\n    return {\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      maxDigits: \"Invalid max digits for TTS prompt\",\n      byeText: \"Invalid bye text for TTS prompt\",\n      pinCode: \"Invalid pin code for TTS confirm\",\n      failedText: \"Invalid failed text for TTS confirm\",\n      answerUrl: \"Invalid answer URL for call\"\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition  options.\n   */\n\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  _sendVoiceMessage(endpoint, data, callback) {\n    if (!data.to) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.to));\n    } else {\n      data[\"api_key\"] = this.creds.apiKey;\n      data[\"api_secret\"] = this.creds.apiSecret;\n      this.options.logger.info(\"sending TTS message to \" + data.to + \" with message \" + data.text);\n      this.options.httpClient.request({\n        host: endpoint.host,\n        path: _Utils.default.createPathWithQuery(endpoint.path, data)\n      }, \"POST\", (err, apiResponse) => {\n        if (!err && apiResponse.status && apiResponse.status > 0) {\n          _Utils.default.sendError(callback, new Error(apiResponse[\"error-text\"]), apiResponse);\n        } else {\n          if (callback) callback(err, apiResponse);\n        }\n      });\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  sendTTSMessage(recipient, message, opts, callback) {\n    if (!message) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n\n      this._sendVoiceMessage({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: \"/tts/json\"\n      }, opts, callback);\n    }\n  }\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n\n\n  sendTTSPromptWithCapture(recipient, message, maxDigits, byeText, opts, callback) {\n    if (!message) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));\n    } else if (!byeText) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      opts[\"max_digits\"] = maxDigits;\n      opts[\"bye_text\"] = byeText;\n\n      this._sendVoiceMessage({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: \"/tts-prompt/json\"\n      }, opts, callback);\n    }\n  }\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n\n\n  sendTTSPromptWithConfirm(recipient, message, maxDigits, pinCode, byeText, failedText, opts, callback) {\n    if (!message) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));\n    } else if (!pinCode || pinCode.length !== maxDigits) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.pinCode));\n    } else if (!byeText) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));\n    } else if (!failedText) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.failedText));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      opts[\"max_digits\"] = maxDigits;\n      opts[\"pin_code\"] = pinCode;\n      opts[\"bye_text\"] = byeText;\n      opts[\"failed_text\"] = failedText;\n\n      this._sendVoiceMessage({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: \"/tts-prompt/json\"\n      }, opts, callback);\n    }\n  }\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n\n\n  call(recipient, answerUrl, opts, callback) {\n    if (!answerUrl) {\n      _Utils.default.sendError(callback, new Error(Voice.ERROR_MESSAGES.answerUrl));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n\n      opts[\"to\"] = recipient;\n      opts[\"answer_url\"] = answerUrl;\n\n      this._sendVoiceMessage({\n        host: this.options.restHost || \"rest.nexmo.com\",\n        path: \"/call/json\"\n      }, opts, callback);\n    }\n  }\n\n}\n\nvar _default = Voice;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Voice.js"],"names":["ERROR_MESSAGES","to","msg","maxDigits","byeText","pinCode","failedText","answerUrl","constructor","options","_sendVoiceMessage","data","Utils","Voice","host","endpoint","path","apiResponse","callback","sendTTSMessage","opts","sendTTSPromptWithCapture","isNaN","sendTTSPromptWithConfirm","call"],"mappings":"AAAA;;;;;;;AAEA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;;;;;;;AAEA,MAAA,KAAA,CAAY;AACe,aAAdA,cAAc,GAAG;AAC1B,WAAO;AACLC,MAAAA,EAAE,EADG,oBAAA;AAELC,MAAAA,GAAG,EAFE,sBAAA;AAGLC,MAAAA,SAAS,EAHJ,mCAAA;AAILC,MAAAA,OAAO,EAJF,iCAAA;AAKLC,MAAAA,OAAO,EALF,kCAAA;AAMLC,MAAAA,UAAU,EANL,qCAAA;AAOLC,MAAAA,SAAS,EAAE;AAPN,KAAP;AASD;AACD;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,WAAW,CAAA,WAAA,EAA4B;AAAA,QAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACrC,SAAA,KAAA,GAAA,WAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACD;;AAEDC,EAAAA,iBAAiB,CAAA,QAAA,EAAA,IAAA,EAAA,QAAA,EAA2B;AAC1C,QAAI,CAACC,IAAI,CAAT,EAAA,EAAc;AACZC,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,EAA0B,CAA1BA;AADF,KAAA,MAEO;AACLD,MAAAA,IAAI,CAAJA,SAAI,CAAJA,GAAkB,KAAA,KAAA,CAAlBA,MAAAA;AACAA,MAAAA,IAAI,CAAJA,YAAI,CAAJA,GAAqB,KAAA,KAAA,CAArBA,SAAAA;AACA,WAAA,OAAA,CAAA,MAAA,CAAA,IAAA,CACE,4BAA4BA,IAAI,CAAhC,EAAA,GAAA,gBAAA,GAAyDA,IAAI,CAD/D,IAAA;AAGA,WAAA,OAAA,CAAA,UAAA,CAAA,OAAA,CACE;AACEG,QAAAA,IAAI,EAAEC,QAAQ,CADhB,IAAA;AAEEC,QAAAA,IAAI,EAAEJ,MAAAA,CAAAA,OAAAA,CAAAA,mBAAAA,CAA0BG,QAAQ,CAAlCH,IAAAA,EAAAA,IAAAA;AAFR,OADF,EAAA,MAAA,EAME,CAAA,GAAA,EAAA,WAAA,KAAsB;AACpB,YAAI,CAAA,GAAA,IAAQK,WAAW,CAAnB,MAAA,IAA8BA,WAAW,CAAXA,MAAAA,GAAlC,CAAA,EAA0D;AACxDL,UAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAEE,IAAA,KAAA,CAAUK,WAAW,CAFvBL,YAEuB,CAArB,CAFFA,EAAAA,WAAAA;AADF,SAAA,MAMO;AACL,cAAA,QAAA,EAAcM,QAAQ,CAAA,GAAA,EAARA,WAAQ,CAARA;AACf;AAfL,OAAA;AAkBD;AACF;AAED;AACF;AACA;;;AACEC,EAAAA,cAAc,CAAA,SAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAqC;AACjD,QAAI,CAAJ,OAAA,EAAc;AACZP,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,GAA0B,CAA1BA;AADF,KAAA,MAEO;AACL,UAAI,CAAJ,IAAA,EAAW;AACTQ,QAAAA,IAAI,GAAJA,EAAAA;AACD;;AACDA,MAAAA,IAAI,CAAJA,IAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,MAAI,CAAJA,GAAAA,OAAAA;;AACA,WAAA,iBAAA,CACE;AACEN,QAAAA,IAAI,EAAE,KAAA,OAAA,CAAA,OAAA,IADR,eAAA;AAEEE,QAAAA,IAAI,EAAE;AAFR,OADF,EAAA,IAAA,EAAA,QAAA;AAQD;AACF;AAED;AACF;AACA;;;AACEK,EAAAA,wBAAwB,CAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAOtB;AACA,QAAI,CAAJ,OAAA,EAAc;AACZT,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,GAA0B,CAA1BA;AADF,KAAA,MAEO,IAAI,CAAA,SAAA,IAAcU,KAAK,CAAnB,SAAmB,CAAnB,IAAkCnB,SAAS,CAATA,MAAAA,GAAtC,EAAA,EAA6D;AAClES,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,SAA0B,CAA1BA;AADK,KAAA,MAEA,IAAI,CAAJ,OAAA,EAAc;AACnBA,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,OAA0B,CAA1BA;AADK,KAAA,MAEA;AACL,UAAI,CAAJ,IAAA,EAAW;AACTQ,QAAAA,IAAI,GAAJA,EAAAA;AACD;;AACDA,MAAAA,IAAI,CAAJA,IAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,MAAI,CAAJA,GAAAA,OAAAA;AACAA,MAAAA,IAAI,CAAJA,YAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAAA,OAAAA;;AACA,WAAA,iBAAA,CACE;AACEN,QAAAA,IAAI,EAAE,KAAA,OAAA,CAAA,OAAA,IADR,eAAA;AAEEE,QAAAA,IAAI,EAAE;AAFR,OADF,EAAA,IAAA,EAAA,QAAA;AAQD;AACF;AAED;AACF;AACA;;;AACEO,EAAAA,wBAAwB,CAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,QAAA,EAStB;AACA,QAAI,CAAJ,OAAA,EAAc;AACZX,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,GAA0B,CAA1BA;AADF,KAAA,MAEO,IAAI,CAAA,SAAA,IAAcU,KAAK,CAAnB,SAAmB,CAAnB,IAAkCnB,SAAS,CAATA,MAAAA,GAAtC,EAAA,EAA6D;AAClES,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,SAA0B,CAA1BA;AADK,KAAA,MAEA,IAAI,CAAA,OAAA,IAAYP,OAAO,CAAPA,MAAAA,KAAhB,SAAA,EAA8C;AACnDO,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,OAA0B,CAA1BA;AADK,KAAA,MAEA,IAAI,CAAJ,OAAA,EAAc;AACnBA,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,OAA0B,CAA1BA;AADK,KAAA,MAEA,IAAI,CAAJ,UAAA,EAAiB;AACtBA,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,UAA0B,CAA1BA;AADK,KAAA,MAEA;AACL,UAAI,CAAJ,IAAA,EAAW;AACTQ,QAAAA,IAAI,GAAJA,EAAAA;AACD;;AACDA,MAAAA,IAAI,CAAJA,IAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,MAAI,CAAJA,GAAAA,OAAAA;AACAA,MAAAA,IAAI,CAAJA,YAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAAA,OAAAA;AACAA,MAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAAA,OAAAA;AACAA,MAAAA,IAAI,CAAJA,aAAI,CAAJA,GAAAA,UAAAA;;AACA,WAAA,iBAAA,CACE;AACEN,QAAAA,IAAI,EAAE,KAAA,OAAA,CAAA,OAAA,IADR,eAAA;AAEEE,QAAAA,IAAI,EAAE;AAFR,OADF,EAAA,IAAA,EAAA,QAAA;AAQD;AACF;AAED;AACF;AACA;;;AACEQ,EAAAA,IAAI,CAAA,SAAA,EAAA,SAAA,EAAA,IAAA,EAAA,QAAA,EAAuC;AACzC,QAAI,CAAJ,SAAA,EAAgB;AACdZ,MAAAA,MAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAA0B,IAAA,KAAA,CAAUC,KAAK,CAALA,cAAAA,CAApCD,SAA0B,CAA1BA;AADF,KAAA,MAEO;AACL,UAAI,CAAJ,IAAA,EAAW;AACTQ,QAAAA,IAAI,GAAJA,EAAAA;AACD;;AACDA,MAAAA,IAAI,CAAJA,IAAI,CAAJA,GAAAA,SAAAA;AACAA,MAAAA,IAAI,CAAJA,YAAI,CAAJA,GAAAA,SAAAA;;AACA,WAAA,iBAAA,CACE;AACEN,QAAAA,IAAI,EAAE,KAAA,OAAA,CAAA,QAAA,IADR,gBAAA;AAEEE,QAAAA,IAAI,EAAE;AAFR,OADF,EAAA,IAAA,EAAA,QAAA;AAQD;AACF;;AAjLS;;eAoLGH,K","sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nclass Voice {\n  static get ERROR_MESSAGES() {\n    return {\n      to: \"Invalid to address\",\n      msg: \"Invalid Text Message\",\n      maxDigits: \"Invalid max digits for TTS prompt\",\n      byeText: \"Invalid bye text for TTS prompt\",\n      pinCode: \"Invalid pin code for TTS confirm\",\n      failedText: \"Invalid failed text for TTS confirm\",\n      answerUrl: \"Invalid answer URL for call\",\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition  options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  _sendVoiceMessage(endpoint, data, callback) {\n    if (!data.to) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.to));\n    } else {\n      data[\"api_key\"] = this.creds.apiKey;\n      data[\"api_secret\"] = this.creds.apiSecret;\n      this.options.logger.info(\n        \"sending TTS message to \" + data.to + \" with message \" + data.text\n      );\n      this.options.httpClient.request(\n        {\n          host: endpoint.host,\n          path: Utils.createPathWithQuery(endpoint.path, data),\n        },\n        \"POST\",\n        (err, apiResponse) => {\n          if (!err && apiResponse.status && apiResponse.status > 0) {\n            Utils.sendError(\n              callback,\n              new Error(apiResponse[\"error-text\"]),\n              apiResponse\n            );\n          } else {\n            if (callback) callback(err, apiResponse);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  sendTTSMessage(recipient, message, opts, callback) {\n    if (!message) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      this._sendVoiceMessage(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: \"/tts/json\",\n        },\n        opts,\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n  sendTTSPromptWithCapture(\n    recipient,\n    message,\n    maxDigits,\n    byeText,\n    opts,\n    callback\n  ) {\n    if (!message) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));\n    } else if (!byeText) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      opts[\"max_digits\"] = maxDigits;\n      opts[\"bye_text\"] = byeText;\n      this._sendVoiceMessage(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: \"/tts-prompt/json\",\n        },\n        opts,\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n  sendTTSPromptWithConfirm(\n    recipient,\n    message,\n    maxDigits,\n    pinCode,\n    byeText,\n    failedText,\n    opts,\n    callback\n  ) {\n    if (!message) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.msg));\n    } else if (!maxDigits || isNaN(maxDigits) || maxDigits.length > 16) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.maxDigits));\n    } else if (!pinCode || pinCode.length !== maxDigits) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.pinCode));\n    } else if (!byeText) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.byeText));\n    } else if (!failedText) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.failedText));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n      opts[\"to\"] = recipient;\n      opts[\"text\"] = message;\n      opts[\"max_digits\"] = maxDigits;\n      opts[\"pin_code\"] = pinCode;\n      opts[\"bye_text\"] = byeText;\n      opts[\"failed_text\"] = failedText;\n      this._sendVoiceMessage(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: \"/tts-prompt/json\",\n        },\n        opts,\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: remove with next major version, API is 404\n   */\n  call(recipient, answerUrl, opts, callback) {\n    if (!answerUrl) {\n      Utils.sendError(callback, new Error(Voice.ERROR_MESSAGES.answerUrl));\n    } else {\n      if (!opts) {\n        opts = {};\n      }\n      opts[\"to\"] = recipient;\n      opts[\"answer_url\"] = answerUrl;\n      this._sendVoiceMessage(\n        {\n          host: this.options.restHost || \"rest.nexmo.com\",\n          path: \"/call/json\",\n        },\n        opts,\n        callback\n      );\n    }\n  }\n}\n\nexport default Voice;\n"]},"metadata":{},"sourceType":"script"}