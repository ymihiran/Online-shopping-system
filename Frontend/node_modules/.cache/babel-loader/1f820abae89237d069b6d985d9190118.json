{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _querystring = _interopRequireDefault(require(\"querystring\"));\n\nvar _StreamResource = _interopRequireDefault(require(\"./StreamResource\"));\n\nvar _TalkResource = _interopRequireDefault(require(\"./TalkResource\"));\n\nvar _DtmfResource = _interopRequireDefault(require(\"./DtmfResource\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Provides access to the `calls` resource.\n */\n\n\nclass CallsResource {\n  /**\n   * The path to the `calls` resource.\n   */\n  static get PATH() {\n    return \"/v1/calls\";\n  }\n  /**\n   * Creates a new CallsResource.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.\n   * @param {Object} options - additional options for the class.\n   */\n\n\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n    /**\n     * @type StreamController\n     */\n\n    this.stream = new _StreamResource.default(this.creds, this.options);\n    /**\n     * @type TalkResource\n     */\n\n    this.talk = new _TalkResource.default(this.creds, this.options);\n    /**\n     * @type DtmfResource\n     */\n\n    this.dtmf = new _DtmfResource.default(this.creds, this.options);\n  }\n  /**\n   * Create a new call.\n   *\n   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n\n  create(params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: CallsResource.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Get an existing call.\n   *\n   * @param {string|object} query - The unique identifier for the call to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n\n  get(query, callback) {\n    if (!query) {\n      throw new Error('\"query\" is a required parameter');\n    }\n\n    var pathExt = \"\";\n\n    if (typeof query === \"string\") {\n      // single call Id\n      pathExt = \"/\".concat(query);\n    } else if (typeof query === \"object\" && Object.keys(query).length > 0) {\n      // filter\n      pathExt = \"?\".concat(_querystring.default.stringify(query));\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(CallsResource.PATH).concat(pathExt),\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n  /**\n   * Update an existing call.\n   *\n   * @param {string} [callId] - The unique identifier for the call to update.\n   * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n\n\n  update(callId, params, callback) {\n    params = JSON.stringify(params);\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: \"\".concat(CallsResource.PATH, \"/\").concat(callId),\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: \"Bearer \".concat(this.creds.generateJwt())\n      }\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n}\n\nvar _default = CallsResource;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/CallsResource.js"],"names":["PATH","constructor","StreamResource","TalkResource","DtmfResource","create","params","JSON","config","host","path","CallsResource","method","body","headers","Buffer","Authorization","get","pathExt","Object","querystring","update"],"mappings":"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","sourcesContent":["import querystring from \"querystring\";\n\nimport StreamResource from \"./StreamResource\";\nimport TalkResource from \"./TalkResource\";\nimport DtmfResource from \"./DtmfResource\";\n\n/**\n * Provides access to the `calls` resource.\n */\nclass CallsResource {\n  /**\n   * The path to the `calls` resource.\n   */\n  static get PATH() {\n    return \"/v1/calls\";\n  }\n\n  /**\n   * Creates a new CallsResource.\n   *\n   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.\n   * @param {Object} options - additional options for the class.\n   */\n  constructor(creds, options) {\n    this.creds = creds;\n    this.options = options;\n\n    /**\n     * @type StreamController\n     */\n    this.stream = new StreamResource(this.creds, this.options);\n\n    /**\n     * @type TalkResource\n     */\n    this.talk = new TalkResource(this.creds, this.options);\n\n    /**\n     * @type DtmfResource\n     */\n    this.dtmf = new DtmfResource(this.creds, this.options);\n  }\n\n  /**\n   * Create a new call.\n   *\n   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  create(params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: CallsResource.PATH,\n      method: \"POST\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Get an existing call.\n   *\n   * @param {string|object} query - The unique identifier for the call to retrieve\n   *               or a set of filter parameters for the query. For more information\n   *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve\n   * @param {function} callback - function to be called when the request completes.\n   */\n  get(query, callback) {\n    if (!query) {\n      throw new Error('\"query\" is a required parameter');\n    }\n\n    var pathExt = \"\";\n    if (typeof query === \"string\") {\n      // single call Id\n      pathExt = `/${query}`;\n    } else if (typeof query === \"object\" && Object.keys(query).length > 0) {\n      // filter\n      pathExt = `?${querystring.stringify(query)}`;\n    }\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${CallsResource.PATH}${pathExt}`,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n\n  /**\n   * Update an existing call.\n   *\n   * @param {string} [callId] - The unique identifier for the call to update.\n   * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.\n   * @param {function} callback - function to be called when the request completes.\n   */\n  update(callId, params, callback) {\n    params = JSON.stringify(params);\n\n    var config = {\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: `${CallsResource.PATH}/${callId}`,\n      method: \"PUT\",\n      body: params,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": Buffer.byteLength(params),\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n    };\n    this.options.httpClient.request(config, callback);\n  }\n}\n\nexport default CallsResource;\n"]},"metadata":{},"sourceType":"script"}