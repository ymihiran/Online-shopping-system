{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _querystring = _interopRequireDefault(require(\"querystring\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass Media {\n  static get PATH() {\n    return \"/v3/media\";\n  }\n\n  constructor(credentials, options) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  upload(opts, callback) {\n    opts = opts || {};\n\n    if (!opts.file && !opts.url) {\n      throw new Error(\"You must provide either 'file' or 'url' to upload a file\");\n    }\n\n    if (opts.file) {\n      opts.file = _fs.default.createReadStream(opts.file);\n    }\n\n    return this.options.api.postFile(Media.PATH, opts, function (err, response, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      var location = \"\";\n\n      if (response && response.headers) {\n        location = response.headers.location;\n      }\n\n      return callback(null, location);\n    }, true);\n  }\n\n  search(options, callback) {\n    if (typeof options == \"function\" && !callback) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    return this._makeRequest(\"GET\", Media.PATH, options, {}, callback);\n  } // If If-Modified-Since header is provided and the data hasn't changed, the\n  // user will receive an empty body in the callback, NOT an error\n\n\n  download(id, headers, callback) {\n    if (!callback && typeof headers == \"function\") {\n      callback = headers;\n      headers = {};\n    }\n\n    return this._makeRequest(\"GET\", \"\".concat(Media.PATH, \"/\").concat(id), {}, headers, callback, true);\n  }\n\n  delete(id, callback) {\n    return this._makeRequest(\"DELETE\", \"\".concat(Media.PATH, \"/\").concat(id), {}, {}, callback);\n  }\n\n  get(id, callback) {\n    return this._makeRequest(\"GET\", \"\".concat(Media.PATH, \"/\").concat(id, \"/info\"), {}, {}, callback);\n  }\n\n  update(id, opts, callback) {\n    return this._makeRequest(\"PUT\", \"\".concat(Media.PATH, \"/\").concat(id, \"/info\"), opts, {}, callback);\n  }\n\n  _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {\n    headers = Object.assign({\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \".concat(this.creds.generateJwt())\n    }, headers);\n    var req = {};\n\n    if (verb.toUpperCase() === \"GET\") {\n      if (Object.keys(options).length) {\n        path = path + \"?\" + _querystring.default.stringify(options);\n      }\n    } else {\n      req[\"body\"] = JSON.stringify(options);\n    }\n\n    req[\"path\"] = path;\n    req[\"headers\"] = headers;\n    return this.options.api.request(req, verb, callback, skipJsonParsing);\n  }\n\n}\n\nvar _default = Media;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Media.js"],"names":["PATH","constructor","upload","opts","fs","Media","callback","location","response","search","options","download","headers","delete","get","update","_makeRequest","Authorization","req","verb","Object","path","querystring","JSON"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport fs from \"fs\";\nimport querystring from \"querystring\";\n\nclass Media {\n  static get PATH() {\n    return \"/v3/media\";\n  }\n\n  constructor(credentials, options) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  upload(opts, callback) {\n    opts = opts || {};\n    if (!opts.file && !opts.url) {\n      throw new Error(\n        \"You must provide either 'file' or 'url' to upload a file\"\n      );\n    }\n\n    if (opts.file) {\n      opts.file = fs.createReadStream(opts.file);\n    }\n    return this.options.api.postFile(\n      Media.PATH,\n      opts,\n      function (err, response, body) {\n        if (err) {\n          return callback(err);\n        }\n\n        let location = \"\";\n        if (response && response.headers) {\n          location = response.headers.location;\n        }\n\n        return callback(null, location);\n      },\n      true\n    );\n  }\n\n  search(options, callback) {\n    if (typeof options == \"function\" && !callback) {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n\n    return this._makeRequest(\"GET\", Media.PATH, options, {}, callback);\n  }\n\n  // If If-Modified-Since header is provided and the data hasn't changed, the\n  // user will receive an empty body in the callback, NOT an error\n  download(id, headers, callback) {\n    if (!callback && typeof headers == \"function\") {\n      callback = headers;\n      headers = {};\n    }\n\n    return this._makeRequest(\n      \"GET\",\n      `${Media.PATH}/${id}`,\n      {},\n      headers,\n      callback,\n      true\n    );\n  }\n\n  delete(id, callback) {\n    return this._makeRequest(\"DELETE\", `${Media.PATH}/${id}`, {}, {}, callback);\n  }\n\n  get(id, callback) {\n    return this._makeRequest(\n      \"GET\",\n      `${Media.PATH}/${id}/info`,\n      {},\n      {},\n      callback\n    );\n  }\n\n  update(id, opts, callback) {\n    return this._makeRequest(\n      \"PUT\",\n      `${Media.PATH}/${id}/info`,\n      opts,\n      {},\n      callback\n    );\n  }\n\n  _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {\n    headers = Object.assign(\n      {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${this.creds.generateJwt()}`,\n      },\n      headers\n    );\n\n    let req = {};\n    if (verb.toUpperCase() === \"GET\") {\n      if (Object.keys(options).length) {\n        path = path + \"?\" + querystring.stringify(options);\n      }\n    } else {\n      req[\"body\"] = JSON.stringify(options);\n    }\n\n    req[\"path\"] = path;\n    req[\"headers\"] = headers;\n\n    return this.options.api.request(req, verb, callback, skipJsonParsing);\n  }\n}\n\nexport default Media;\n"]},"metadata":{},"sourceType":"script"}