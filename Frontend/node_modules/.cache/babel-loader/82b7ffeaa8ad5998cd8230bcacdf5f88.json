{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _Credentials = _interopRequireDefault(require(\"./Credentials\"));\n\nvar _JwtGenerator = _interopRequireDefault(require(\"./JwtGenerator\"));\n\nvar _HashGenerator = _interopRequireDefault(require(\"./HashGenerator\"));\n\nvar _Message = _interopRequireDefault(require(\"./Message\"));\n\nvar _Voice = _interopRequireDefault(require(\"./Voice\"));\n\nvar _Number = _interopRequireDefault(require(\"./Number\"));\n\nvar _Verify = _interopRequireDefault(require(\"./Verify\"));\n\nvar _NumberInsight = _interopRequireDefault(require(\"./NumberInsight\"));\n\nvar _App = _interopRequireDefault(require(\"./App\"));\n\nvar _Account = _interopRequireDefault(require(\"./Account\"));\n\nvar _CallsResource = _interopRequireDefault(require(\"./CallsResource\"));\n\nvar _FilesResource = _interopRequireDefault(require(\"./FilesResource\"));\n\nvar _Conversion = _interopRequireDefault(require(\"./Conversion\"));\n\nvar _Media = _interopRequireDefault(require(\"./Media\"));\n\nvar _Redact = _interopRequireDefault(require(\"./Redact\"));\n\nvar _Pricing = _interopRequireDefault(require(\"./Pricing\"));\n\nvar _HttpClient = _interopRequireDefault(require(\"./HttpClient\"));\n\nvar _NullLogger = _interopRequireDefault(require(\"./NullLogger\"));\n\nvar _ConsoleLogger = _interopRequireDefault(require(\"./ConsoleLogger\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar jwtGeneratorInstance = new _JwtGenerator.default();\nvar hashGeneratorInstance = new _HashGenerator.default();\n\nclass Vonage {\n  /**\n   * @param {Credentials} credentials - Vonage API credentials\n   * @param {string} credentials.apiKey - the Vonage API key\n   * @param {string} credentials.apiSecret - the Vonage API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      debug: false\n    };\n    this.credentials = _Credentials.default.parse(credentials);\n    this.options = Object.assign({}, options); // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new _ConsoleLogger.default();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new _NullLogger.default();\n    }\n\n    var userAgent = \"@vonage/server-sdk/UNKNOWN node/UNKNOWN\";\n\n    try {\n      var packageDetails = require(_path.default.join(__dirname, \"..\", \"package.json\"));\n\n      userAgent = \"@vonage/server-sdk/\".concat(packageDetails.version, \" node/\").concat(process.version.replace(\"v\", \"\"));\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n\n    this.options.userAgent = userAgent;\n\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += \" \".concat(this.options.appendToUserAgent);\n    } // This is legacy, everything should use rest or api going forward\n\n\n    this.options.httpClient = new _HttpClient.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials); // We have two different hosts, so we use two different HttpClients\n\n    this.options.api = new _HttpClient.default(Object.assign({\n      host: this.options.apiHost || \"api.nexmo.com\"\n    }, this.options), this.credentials);\n    this.options.rest = new _HttpClient.default(Object.assign({\n      host: this.options.restHost || \"rest.nexmo.com\"\n    }, this.options), this.credentials);\n    this.message = new _Message.default(this.credentials, this.options);\n    this.voice = new _Voice.default(this.credentials, this.options);\n    this.number = new _Number.default(this.credentials, this.options);\n    this.verify = new _Verify.default(this.credentials, this.options);\n    this.numberInsight = new _NumberInsight.default(this.credentials, this.options);\n    this.applications = new _App.default(this.credentials, this.options);\n    this.account = new _Account.default(this.credentials, this.options);\n    this.calls = new _CallsResource.default(this.credentials, this.options);\n    this.files = new _FilesResource.default(this.credentials, this.options);\n    this.conversion = new _Conversion.default(this.credentials, this.options);\n    this.media = new _Media.default(this.credentials, this.options);\n    this.redact = new _Redact.default(this.credentials, this.options);\n    this.pricing = new _Pricing.default(this.credentials, this.options);\n    /**\n     * @deprecated Please use vonage.applications\n     */\n\n    this.app = this.applications;\n  }\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Vonage instance construction will be used to sign\n   * the JWT. The application_id you used upon Vonage instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n\n  generateJwt() {\n    var claims = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (claims.application_id === undefined) {\n      claims.application_id = this.credentials.applicationId;\n    }\n\n    return Vonage.generateJwt(this.credentials.privateKey, claims);\n  }\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n\n\n  generateSignature(params) {\n    return this.credentials.generateSignature(params);\n  }\n\n}\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\n\n\nVonage.generateJwt = (privateKey, claims) => {\n  if (!(privateKey instanceof Buffer)) {\n    if (!_fs.default.existsSync(privateKey)) {\n      throw new Error(\"File \\\"\".concat(privateKey, \"\\\" not found.\"));\n    } else {\n      privateKey = _fs.default.readFileSync(privateKey);\n    }\n  }\n\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\n\n\nVonage.generateSignature = (method, secret, params) => {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\n\nvar _default = Vonage;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Vonage.js"],"names":["jwtGeneratorInstance","JwtGenerator","hashGeneratorInstance","HashGenerator","constructor","options","debug","Credentials","Object","ConsoleLogger","NullLogger","userAgent","packageDetails","require","path","process","console","HttpClient","host","Message","Voice","Number","Verify","NumberInsight","App","Account","CallsResource","FilesResource","Conversion","Media","Redact","Pricing","generateJwt","claims","Vonage","generateSignature","privateKey","fs"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\n\nimport Credentials from \"./Credentials\";\nimport JwtGenerator from \"./JwtGenerator\";\nimport HashGenerator from \"./HashGenerator\";\nimport Message from \"./Message\";\nimport Voice from \"./Voice\";\nimport Number from \"./Number\";\nimport Verify from \"./Verify\";\nimport NumberInsight from \"./NumberInsight\";\nimport App from \"./App\";\nimport Account from \"./Account\";\nimport CallsResource from \"./CallsResource\";\nimport FilesResource from \"./FilesResource\";\nimport Conversion from \"./Conversion\";\nimport Media from \"./Media\";\nimport Redact from \"./Redact\";\nimport Pricing from \"./Pricing\";\nimport HttpClient from \"./HttpClient\";\nimport NullLogger from \"./NullLogger\";\nimport ConsoleLogger from \"./ConsoleLogger\";\n\nconst jwtGeneratorInstance = new JwtGenerator();\nconst hashGeneratorInstance = new HashGenerator();\n\nclass Vonage {\n  /**\n   * @param {Credentials} credentials - Vonage API credentials\n   * @param {string} credentials.apiKey - the Vonage API key\n   * @param {string} credentials.apiSecret - the Vonage API secret\n   * @param {Object} options - Additional options\n   * @param {boolean} options.debug - `true` to turn on debug logging\n   * @param {Object} options.logger - Set a custom logger.\n   * @param {string} options.appendToUserAgent - A value to append to the user agent.\n   *                    The value will be prefixed with a `/`\n   */\n  constructor(credentials, options = { debug: false }) {\n    this.credentials = Credentials.parse(credentials);\n    this.options = Object.assign({}, options);\n\n    // If no logger has been supplied but debug has been set\n    // default to using the ConsoleLogger\n    if (!this.options.logger && this.options.debug) {\n      this.options.logger = new ConsoleLogger();\n    } else if (!this.options.logger) {\n      // Swallow the logging\n      this.options.logger = new NullLogger();\n    }\n\n    let userAgent = \"@vonage/server-sdk/UNKNOWN node/UNKNOWN\";\n    try {\n      var packageDetails = require(path.join(__dirname, \"..\", \"package.json\"));\n      userAgent = `@vonage/server-sdk/${\n        packageDetails.version\n      } node/${process.version.replace(\"v\", \"\")}`;\n    } catch (e) {\n      console.warn(\"Could not load package details\");\n    }\n    this.options.userAgent = userAgent;\n    if (this.options.appendToUserAgent) {\n      this.options.userAgent += ` ${this.options.appendToUserAgent}`;\n    }\n\n    // This is legacy, everything should use rest or api going forward\n    this.options.httpClient = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    // We have two different hosts, so we use two different HttpClients\n    this.options.api = new HttpClient(\n      Object.assign(\n        { host: this.options.apiHost || \"api.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n    this.options.rest = new HttpClient(\n      Object.assign(\n        { host: this.options.restHost || \"rest.nexmo.com\" },\n        this.options\n      ),\n      this.credentials\n    );\n\n    this.message = new Message(this.credentials, this.options);\n    this.voice = new Voice(this.credentials, this.options);\n    this.number = new Number(this.credentials, this.options);\n    this.verify = new Verify(this.credentials, this.options);\n    this.numberInsight = new NumberInsight(this.credentials, this.options);\n    this.applications = new App(this.credentials, this.options);\n    this.account = new Account(this.credentials, this.options);\n    this.calls = new CallsResource(this.credentials, this.options);\n    this.files = new FilesResource(this.credentials, this.options);\n    this.conversion = new Conversion(this.credentials, this.options);\n    this.media = new Media(this.credentials, this.options);\n    this.redact = new Redact(this.credentials, this.options);\n    this.pricing = new Pricing(this.credentials, this.options);\n\n    /**\n     * @deprecated Please use vonage.applications\n     */\n    this.app = this.applications;\n  }\n\n  /**\n   * Generate a JSON Web Token (JWT).\n   *\n   * The private key used upon Vonage instance construction will be used to sign\n   * the JWT. The application_id you used upon Vonage instance creation will be\n   * included in the claims for the JWT, however this can be overridden by passing\n   * an application_id as part of the claims.\n   *\n   * @param {Object} claims - name/value pair claims to sign within the JWT\n   *\n   * @returns {String} the generated token\n   */\n\n  generateJwt(claims = {}) {\n    if (claims.application_id === undefined) {\n      claims.application_id = this.credentials.applicationId;\n    }\n    return Vonage.generateJwt(this.credentials.privateKey, claims);\n  }\n\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generateSignature(params) {\n    return this.credentials.generateSignature(params);\n  }\n}\n\n/**\n * Generate a JSON Web Token (JWT).\n *\n * @param {String|Buffer} privateKey - the path to the private key certificate\n *          to be used when signing the claims.\n * @param {Object} claims - name/value pair claims to sign within the JWT\n *\n * @returns {String} the generated token\n */\nVonage.generateJwt = (privateKey, claims) => {\n  if (!(privateKey instanceof Buffer)) {\n    if (!fs.existsSync(privateKey)) {\n      throw new Error(`File \"${privateKey}\" not found.`);\n    } else {\n      privateKey = fs.readFileSync(privateKey);\n    }\n  }\n  return jwtGeneratorInstance.generate(privateKey, claims);\n};\n\n/**\n * Generate a Signature Hash.\n *\n * @param {String} method - the method to be used when creating the hash\n * @param {String} secret - the secret to be used when creating the hash\n * @param {Object} params - params to generate hash from\n *\n * @returns {String} the generated token\n */\nVonage.generateSignature = (method, secret, params) => {\n  return hashGeneratorInstance.generate(method, secret, params);\n};\n\nexport default Vonage;\n"]},"metadata":{},"sourceType":"script"}