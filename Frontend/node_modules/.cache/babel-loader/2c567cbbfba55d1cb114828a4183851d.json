{"ast":null,"code":"\"use strict\";\n\nvar crypto = require(\"crypto\");\n\nclass HashGenerator {\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {String} method - the method to be used when creating the hash\n   * @param {String} secret - the secret to be used when creating the hash\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generate(method, secret, params) {\n    params = params || {};\n    var signedQuery = \"\";\n    params = JSON.parse(JSON.stringify(params));\n\n    if (params.sig) {\n      delete params.sig;\n    }\n\n    Object.keys(params).sort().forEach(key => {\n      // replace & and = with _\n      signedQuery += \"&\" + key + \"=\" + params[key].replace(/\\&|\\=/g, \"_\");\n    });\n    var hash = \"\";\n\n    switch (method) {\n      case \"md5hash\":\n        signedQuery += secret;\n        hash = crypto.createHash(\"md5\").update(signedQuery).digest(\"hex\");\n        break;\n\n      case \"md5\":\n      case \"sha1\":\n      case \"sha256\":\n      case \"sha512\":\n        hash = crypto.createHmac(method, secret).update(signedQuery).digest(\"hex\");\n        break;\n\n      default:\n        throw \"Unknown signature algorithm: \".concat(method, \". Expected: md5hash, md5, sha1, sha256, or sha512\");\n    }\n\n    return hash;\n  }\n\n}\n\nmodule.exports = HashGenerator;","map":{"version":3,"sources":["../src/HashGenerator.js"],"names":["crypto","require","generate","params","signedQuery","JSON","Object","key","hash","module"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAtB,QAAsB,CAAtB;;AAEA,MAAA,aAAA,CAAoB;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,CAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAyB;AAC/BC,IAAAA,MAAM,GAAGA,MAAM,IAAfA,EAAAA;AACA,QAAIC,WAAW,GAAf,EAAA;AAEAD,IAAAA,MAAM,GAAGE,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,SAAAA,CAApBF,MAAoBE,CAAXA,CAATF;;AAEA,QAAIA,MAAM,CAAV,GAAA,EAAgB;AACd,aAAOA,MAAM,CAAb,GAAA;AACD;;AAEDG,IAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,IAAAA,GAAAA,OAAAA,CAEYC,GAAD,IAAS;AAChB;AACAH,MAAAA,WAAW,IAAI,MAAA,GAAA,GAAA,GAAA,GAAkBD,MAAM,CAANA,GAAM,CAANA,CAAAA,OAAAA,CAAAA,QAAAA,EAAjCC,GAAiCD,CAAjCC;AAJJE,KAAAA;AAOA,QAAIE,IAAI,GAAR,EAAA;;AAEA,YAAA,MAAA;AACE,WAAA,SAAA;AACEJ,QAAAA,WAAW,IAAXA,MAAAA;AACAI,QAAAA,IAAI,GAAGR,MAAM,CAANA,UAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAPQ,KAAOR,CAAPQ;AACA;;AACF,WAAA,KAAA;AACA,WAAA,MAAA;AACA,WAAA,QAAA;AACA,WAAA,QAAA;AACEA,QAAAA,IAAI,GAAGR,MAAM,CAANA,UAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,MAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAPQ,KAAOR,CAAPQ;AAIA;;AAEF;AACE,cAAA,gCAAA,MAAA,CAAA,MAAA,EAAA,mDAAA,CAAA;AAhBJ;;AAmBA,WAAA,IAAA;AACD;;AAjDiB;;AAoDpBC,MAAM,CAANA,OAAAA,GAAAA,aAAAA","sourcesContent":["const crypto = require(\"crypto\");\n\nclass HashGenerator {\n  /**\n   * Generate a Signature Hash.\n   *\n   * @param {String} method - the method to be used when creating the hash\n   * @param {String} secret - the secret to be used when creating the hash\n   * @param {Object} params - params to generate hash from\n   *\n   * @returns {String} the generated token\n   */\n  generate(method, secret, params) {\n    params = params || {};\n    var signedQuery = \"\";\n\n    params = JSON.parse(JSON.stringify(params));\n\n    if (params.sig) {\n      delete params.sig;\n    }\n\n    Object.keys(params)\n      .sort()\n      .forEach((key) => {\n        // replace & and = with _\n        signedQuery += \"&\" + key + \"=\" + params[key].replace(/\\&|\\=/g, \"_\");\n      });\n\n    var hash = \"\";\n\n    switch (method) {\n      case \"md5hash\":\n        signedQuery += secret;\n        hash = crypto.createHash(\"md5\").update(signedQuery).digest(\"hex\");\n        break;\n      case \"md5\":\n      case \"sha1\":\n      case \"sha256\":\n      case \"sha512\":\n        hash = crypto\n          .createHmac(method, secret)\n          .update(signedQuery)\n          .digest(\"hex\");\n        break;\n\n      default:\n        throw `Unknown signature algorithm: ${method}. Expected: md5hash, md5, sha1, sha256, or sha512`;\n    }\n\n    return hash;\n  }\n}\n\nmodule.exports = HashGenerator;\n"]},"metadata":{},"sourceType":"script"}