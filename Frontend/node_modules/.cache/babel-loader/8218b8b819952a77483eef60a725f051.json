{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Utils = _interopRequireDefault(require(\"./Utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nclass Verify {\n  static get PATH() {\n    return \"/verify{action}/json\";\n  }\n\n  static get ERROR_MESSAGES() {\n    return {\n      verifyValidation: \"Missing Mandatory fields (number and/or brand)\",\n      checkVerifyValidation: \"Missing Mandatory fields (request_id and/or code)\",\n      controlVerifyValidation: \"Missing Mandatory fields (request_id and/or cmd-command)\",\n      searchVerifyValidation: \"Missing Mandatory fields (request_id or request_ids)\"\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Verify options.\n   */\n\n\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n  /**\n   * TODO: document\n   */\n\n\n  request(inputParams, callback) {\n    if (!inputParams.number || !inputParams.brand) {\n      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.verifyValidation));\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(Verify.PATH.replace(\"{action}\", \"\")), inputParams)\n      }, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  psd2(inputParams, callback) {\n    inputParams[\"api_key\"] = this.creds.apiKey;\n    inputParams[\"api_secret\"] = this.creds.apiSecret;\n    this.options.httpClient.request({\n      host: this.options.apiHost || \"api.nexmo.com\",\n      path: _Utils.default.createPathWithQuery(\"\".concat(Verify.PATH.replace(\"{action}\", \"/psd2\")), inputParams)\n    }, callback);\n  }\n  /**\n   * TODO: document\n   */\n\n\n  check(inputParams, callback) {\n    if (!inputParams.request_id || !inputParams.code) {\n      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.checkVerifyValidation));\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(Verify.PATH.replace(\"{action}\", \"/check\")), inputParams)\n      }, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  control(inputParams, callback) {\n    if (!inputParams.request_id || !inputParams.cmd) {\n      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.controlVerifyValidation));\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(Verify.PATH.replace(\"{action}\", \"/control\")), inputParams)\n      }, callback);\n    }\n  }\n  /**\n   * TODO: document\n   */\n\n\n  search(requestIds, callback) {\n    var requestIdParam = {};\n\n    if (!requestIds) {\n      _Utils.default.sendError(callback, new Error(Verify.ERROR_MESSAGES.searchVerifyValidation));\n    } else {\n      if (Array.isArray(requestIds)) {\n        if (requestIds.length === 1) {\n          requestIdParam.request_id = requestIds;\n        } else {\n          requestIdParam.request_ids = requestIds;\n        }\n      } else {\n        requestIdParam.request_id = requestIds;\n      }\n\n      requestIdParam[\"api_key\"] = this.creds.apiKey;\n      requestIdParam[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request({\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: _Utils.default.createPathWithQuery(\"\".concat(Verify.PATH.replace(\"{action}\", \"/search\")), requestIdParam)\n      }, callback);\n    }\n  }\n\n}\n\nvar _default = Verify;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Verify.js"],"names":["PATH","ERROR_MESSAGES","verifyValidation","checkVerifyValidation","controlVerifyValidation","searchVerifyValidation","constructor","options","request","inputParams","Utils","Verify","host","path","psd2","check","control","search","requestIdParam","Array","requestIds"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport Utils from \"./Utils\";\n\nclass Verify {\n  static get PATH() {\n    return \"/verify{action}/json\";\n  }\n\n  static get ERROR_MESSAGES() {\n    return {\n      verifyValidation: \"Missing Mandatory fields (number and/or brand)\",\n      checkVerifyValidation:\n        \"Missing Mandatory fields (request_id and/or code)\",\n      controlVerifyValidation:\n        \"Missing Mandatory fields (request_id and/or cmd-command)\",\n      searchVerifyValidation:\n        \"Missing Mandatory fields (request_id or request_ids)\",\n    };\n  }\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Verify options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * TODO: document\n   */\n  request(inputParams, callback) {\n    if (!inputParams.number || !inputParams.brand) {\n      Utils.sendError(\n        callback,\n        new Error(Verify.ERROR_MESSAGES.verifyValidation)\n      );\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${Verify.PATH.replace(\"{action}\", \"\")}`,\n            inputParams\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  psd2(inputParams, callback) {\n    inputParams[\"api_key\"] = this.creds.apiKey;\n    inputParams[\"api_secret\"] = this.creds.apiSecret;\n    this.options.httpClient.request(\n      {\n        host: this.options.apiHost || \"api.nexmo.com\",\n        path: Utils.createPathWithQuery(\n          `${Verify.PATH.replace(\"{action}\", \"/psd2\")}`,\n          inputParams\n        ),\n      },\n      callback\n    );\n  }\n\n  /**\n   * TODO: document\n   */\n  check(inputParams, callback) {\n    if (!inputParams.request_id || !inputParams.code) {\n      Utils.sendError(\n        callback,\n        new Error(Verify.ERROR_MESSAGES.checkVerifyValidation)\n      );\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${Verify.PATH.replace(\"{action}\", \"/check\")}`,\n            inputParams\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  control(inputParams, callback) {\n    if (!inputParams.request_id || !inputParams.cmd) {\n      Utils.sendError(\n        callback,\n        new Error(Verify.ERROR_MESSAGES.controlVerifyValidation)\n      );\n    } else {\n      inputParams[\"api_key\"] = this.creds.apiKey;\n      inputParams[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${Verify.PATH.replace(\"{action}\", \"/control\")}`,\n            inputParams\n          ),\n        },\n        callback\n      );\n    }\n  }\n\n  /**\n   * TODO: document\n   */\n  search(requestIds, callback) {\n    var requestIdParam = {};\n    if (!requestIds) {\n      Utils.sendError(\n        callback,\n        new Error(Verify.ERROR_MESSAGES.searchVerifyValidation)\n      );\n    } else {\n      if (Array.isArray(requestIds)) {\n        if (requestIds.length === 1) {\n          requestIdParam.request_id = requestIds;\n        } else {\n          requestIdParam.request_ids = requestIds;\n        }\n      } else {\n        requestIdParam.request_id = requestIds;\n      }\n      requestIdParam[\"api_key\"] = this.creds.apiKey;\n      requestIdParam[\"api_secret\"] = this.creds.apiSecret;\n      this.options.httpClient.request(\n        {\n          host: this.options.apiHost || \"api.nexmo.com\",\n          path: Utils.createPathWithQuery(\n            `${Verify.PATH.replace(\"{action}\", \"/search\")}`,\n            requestIdParam\n          ),\n        },\n        callback\n      );\n    }\n  }\n}\n\nexport default Verify;\n"]},"metadata":{},"sourceType":"script"}