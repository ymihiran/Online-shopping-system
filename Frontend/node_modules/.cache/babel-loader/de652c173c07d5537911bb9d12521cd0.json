{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nclass Account {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Account options.\n   */\n  constructor(credentials) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.creds = credentials;\n    this.options = options;\n  }\n  /**\n   * TODO: document\n   */\n\n\n  checkBalance(callback) {\n    return this.options.rest.get(\"/account/get-balance\", callback);\n  }\n\n  updatePassword(newSecret, callback) {\n    return this.options.rest.postUseQueryString(\"/account/settings\", {\n      newSecret\n    }, callback);\n  }\n\n  updateSMSCallback(moCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\"/account/settings\", {\n      moCallBackUrl\n    }, callback);\n  }\n\n  updateDeliveryReceiptCallback(drCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\"/account/settings\", {\n      drCallBackUrl\n    }, callback);\n  }\n\n  topUp(trx, callback) {\n    return this.options.rest.postUseQueryString(\"/account/top-up\", {\n      trx\n    }, callback);\n  }\n\n  listSecrets(apiKey, callback) {\n    return this.options.api.get(\"/accounts/\" + apiKey + \"/secrets\", {}, callback, false, true);\n  }\n\n  getSecret(apiKey, id, callback) {\n    return this.options.api.get(\"/accounts/\" + apiKey + \"/secrets/\" + id, {}, callback, false, true);\n  }\n\n  createSecret(apiKey, secret, callback) {\n    return this.options.api.postJson(\"/accounts/\" + apiKey + \"/secrets/\", {\n      secret: secret\n    }, callback, false, true);\n  }\n\n  deleteSecret(apiKey, id, callback) {\n    return this.options.api.delete(\"/accounts/\" + apiKey + \"/secrets/\" + id, callback, false, true);\n  }\n\n}\n\nvar _default = Account;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["../src/Account.js"],"names":["constructor","options","checkBalance","updatePassword","newSecret","updateSMSCallback","moCallBackUrl","updateDeliveryReceiptCallback","drCallBackUrl","topUp","trx","listSecrets","getSecret","createSecret","secret","deleteSecret","Account"],"mappings":"AAAA;;;;;;;AAEA,MAAA,OAAA,CAAc;AACZ;AACF;AACA;AACA;AACA;AACA;AACEA,EAAAA,WAAW,CAAA,WAAA,EAA4B;AAAA,QAAdC,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AACrC,SAAA,KAAA,GAAA,WAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,YAAY,CAAA,QAAA,EAAW;AACrB,WAAO,KAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,sBAAA,EAAP,QAAO,CAAP;AACD;;AAEDC,EAAAA,cAAc,CAAA,SAAA,EAAA,QAAA,EAAsB;AAClC,WAAO,KAAA,OAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,mBAAA,EAEL;AAAEC,MAAAA;AAAF,KAFK,EAAP,QAAO,CAAP;AAKD;;AAEDC,EAAAA,iBAAiB,CAAA,aAAA,EAAA,QAAA,EAA0B;AACzC,WAAO,KAAA,OAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,mBAAA,EAEL;AAAEC,MAAAA;AAAF,KAFK,EAAP,QAAO,CAAP;AAKD;;AAEDC,EAAAA,6BAA6B,CAAA,aAAA,EAAA,QAAA,EAA0B;AACrD,WAAO,KAAA,OAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,mBAAA,EAEL;AAAEC,MAAAA;AAAF,KAFK,EAAP,QAAO,CAAP;AAKD;;AAEDC,EAAAA,KAAK,CAAA,GAAA,EAAA,QAAA,EAAgB;AACnB,WAAO,KAAA,OAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,iBAAA,EAEL;AAAEC,MAAAA;AAAF,KAFK,EAAP,QAAO,CAAP;AAKD;;AAEDC,EAAAA,WAAW,CAAA,MAAA,EAAA,QAAA,EAAmB;AAC5B,WAAO,KAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CACL,eAAA,MAAA,GADK,UAAA,EAAA,EAAA,EAAA,QAAA,EAAA,KAAA,EAAP,IAAO,CAAP;AAOD;;AAEDC,EAAAA,SAAS,CAAA,MAAA,EAAA,EAAA,EAAA,QAAA,EAAuB;AAC9B,WAAO,KAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CACL,eAAA,MAAA,GAAA,WAAA,GADK,EAAA,EAAA,EAAA,EAAA,QAAA,EAAA,KAAA,EAAP,IAAO,CAAP;AAOD;;AAEDC,EAAAA,YAAY,CAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAA2B;AACrC,WAAO,KAAA,OAAA,CAAA,GAAA,CAAA,QAAA,CACL,eAAA,MAAA,GADK,WAAA,EAEL;AAAEC,MAAAA,MAAM,EAAEA;AAAV,KAFK,EAAA,QAAA,EAAA,KAAA,EAAP,IAAO,CAAP;AAOD;;AAEDC,EAAAA,YAAY,CAAA,MAAA,EAAA,EAAA,EAAA,QAAA,EAAuB;AACjC,WAAO,KAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CACL,eAAA,MAAA,GAAA,WAAA,GADK,EAAA,EAAA,QAAA,EAAA,KAAA,EAAP,IAAO,CAAP;AAMD;;AAxFW;;eA2FCC,O","sourcesContent":["\"use strict\";\n\nclass Account {\n  /**\n   * @param {Credentials} credentials\n   *    credentials to be used when interacting with the API.\n   * @param {Object} options\n   *    Addition Account options.\n   */\n  constructor(credentials, options = {}) {\n    this.creds = credentials;\n    this.options = options;\n  }\n\n  /**\n   * TODO: document\n   */\n  checkBalance(callback) {\n    return this.options.rest.get(\"/account/get-balance\", callback);\n  }\n\n  updatePassword(newSecret, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { newSecret },\n      callback\n    );\n  }\n\n  updateSMSCallback(moCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { moCallBackUrl },\n      callback\n    );\n  }\n\n  updateDeliveryReceiptCallback(drCallBackUrl, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/settings\",\n      { drCallBackUrl },\n      callback\n    );\n  }\n\n  topUp(trx, callback) {\n    return this.options.rest.postUseQueryString(\n      \"/account/top-up\",\n      { trx },\n      callback\n    );\n  }\n\n  listSecrets(apiKey, callback) {\n    return this.options.api.get(\n      \"/accounts/\" + apiKey + \"/secrets\",\n      {},\n      callback,\n      false,\n      true\n    );\n  }\n\n  getSecret(apiKey, id, callback) {\n    return this.options.api.get(\n      \"/accounts/\" + apiKey + \"/secrets/\" + id,\n      {},\n      callback,\n      false,\n      true\n    );\n  }\n\n  createSecret(apiKey, secret, callback) {\n    return this.options.api.postJson(\n      \"/accounts/\" + apiKey + \"/secrets/\",\n      { secret: secret },\n      callback,\n      false,\n      true\n    );\n  }\n\n  deleteSecret(apiKey, id, callback) {\n    return this.options.api.delete(\n      \"/accounts/\" + apiKey + \"/secrets/\" + id,\n      callback,\n      false,\n      true\n    );\n  }\n}\n\nexport default Account;\n"]},"metadata":{},"sourceType":"script"}