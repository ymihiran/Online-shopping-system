"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _image = _interopRequireDefault(require("@react-pdf/image"));

var _getSource = _interopRequireDefault(require("./getSource"));

/* eslint-disable no-param-reassign */

/**
 * Resolves async src if passed
 *
 * @param {string | Function} src
 * @returns {object} resolved src
 */
var resolveSrc = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(src) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof src === 'function')) {
              _context.next = 7;
              break;
            }

            _context.next = 3;
            return src();

          case 3:
            _context.t1 = _context.sent;
            _context.t0 = {
              uri: _context.t1
            };
            _context.next = 8;
            break;

          case 7:
            _context.t0 = src;

          case 8:
            return _context.abrupt("return", _context.t0);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function resolveSrc(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Fetches image and append data to node
 * Ideally this fn should be immutable.
 *
 * @param {Object} node
 */


var fetchImage = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(node) {
    var src, cache, source;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            src = (0, _getSource.default)(node);
            cache = node.props.cache;

            if (src) {
              _context2.next = 5;
              break;
            }

            console.warn(false, 'Image should receive either a "src" or "source" prop');
            return _context2.abrupt("return");

          case 5:
            _context2.prev = 5;
            _context2.next = 8;
            return resolveSrc(src);

          case 8:
            source = _context2.sent;
            _context2.next = 11;
            return (0, _image.default)(source, {
              cache: cache
            });

          case 11:
            node.image = _context2.sent;
            _context2.next = 18;
            break;

          case 14:
            _context2.prev = 14;
            _context2.t0 = _context2["catch"](5);
            node.image = {
              width: 0,
              height: 0
            };
            console.warn(_context2.t0.message);

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[5, 14]]);
  }));

  return function fetchImage(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var _default = fetchImage;
exports.default = _default;